#pragma once
#include QMK_KEYBOARD_H
#include "keymap.h"

extern rgb_config_t rgb_matrix_config;

void keyboard_post_init_user(void) { rgb_matrix_enable(); }

const uint8_t PROGMEM ledmap[][RGB_MATRIX_LED_COUNT][3] = {
    [BASE] = {{141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}, 
           {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}}, 

    [SYM] = {{141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}, 
           {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255,  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}},

    [NAV] = {{141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}, 
           {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}}, 

    [GAME] = {{27, 255, 255}, {27, 255, 255}, {27, 255, 255}, {27, 255, 255}, {27, 255, 255}, {27, 255, 255},
           {27, 255, 255}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},
           {27, 255, 255}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {27, 255, 255},
           {27, 255, 255}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {27, 255, 255},
           {0, 0, 0},       {0, 0, 0}, 
           {27, 255, 255}, {27, 255, 255}, {27, 255, 255}, {27, 255, 255}, {27, 255, 255}, {27, 255, 255},
           {27, 255, 255}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},
           {27, 255, 255}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {27, 255, 255},
           {27, 255, 255}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {27, 255, 255},
           {0, 0, 0},       {0, 0, 0}}, 

    [MOUSE] = {{141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}, 
           {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235}, {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {141, 108, 235}, {27, 255, 255},  {0, 255, 255},   {0, 255, 255},   {27, 255, 255},  {141, 108, 235},
           {0, 0, 0},       {0, 0, 0}}, 

};

void set_layer_color(int layer) {
  for (int i = 0; i < RGB_MATRIX_LED_COUNT; i++) {
    HSV hsv = {
        .h = pgm_read_byte(&ledmap[layer][i][0]),
        .s = pgm_read_byte(&ledmap[layer][i][1]),
        .v = pgm_read_byte(&ledmap[layer][i][2]),
    };
    if (!hsv.h && !hsv.s && !hsv.v) {
      rgb_matrix_set_color(i, 0, 0, 0);
    } else {
      RGB rgb = hsv_to_rgb(hsv);
      float f = (float)rgb_matrix_config.hsv.v / UINT8_MAX;
      rgb_matrix_set_color(i, f * rgb.r, f * rgb.g, f * rgb.b);
    }
  }
}

bool rgb_matrix_indicators_user(void) {
  if (rawhid_state.rgb_control) {
    return false;
  }
  if (keyboard_config.disable_layer_led) {
    return false;
  }
  switch (biton32(layer_state)) {
  case 0:
    set_layer_color(0);
    break;
  case 1:
    set_layer_color(1);
    break;
  case 2:
    set_layer_color(2);
    break;
  case 3:
    set_layer_color(3);
    break;
  case 4:
    set_layer_color(4);
    break;
  default:
    if (rgb_matrix_get_flags() == LED_FLAG_NONE)
      rgb_matrix_set_color_all(0, 0, 0);
    break;
  }
  return true;
}
